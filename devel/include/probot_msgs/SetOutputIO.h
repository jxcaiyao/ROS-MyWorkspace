// Generated by gencpp from file probot_msgs/SetOutputIO.msg
// DO NOT EDIT!


#ifndef PROBOT_MSGS_MESSAGE_SETOUTPUTIO_H
#define PROBOT_MSGS_MESSAGE_SETOUTPUTIO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace probot_msgs
{
template <class ContainerAllocator>
struct SetOutputIO_
{
  typedef SetOutputIO_<ContainerAllocator> Type;

  SetOutputIO_()
    : ioNumber(0)
    , status(0)  {
    }
  SetOutputIO_(const ContainerAllocator& _alloc)
    : ioNumber(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef int8_t _ioNumber_type;
  _ioNumber_type ioNumber;

   typedef int8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IO_LOW)
  #undef IO_LOW
#endif
#if defined(_WIN32) && defined(IO_HIGH)
  #undef IO_HIGH
#endif

  enum {
    IO_LOW = 0,
    IO_HIGH = 1,
  };


  typedef boost::shared_ptr< ::probot_msgs::SetOutputIO_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::probot_msgs::SetOutputIO_<ContainerAllocator> const> ConstPtr;

}; // struct SetOutputIO_

typedef ::probot_msgs::SetOutputIO_<std::allocator<void> > SetOutputIO;

typedef boost::shared_ptr< ::probot_msgs::SetOutputIO > SetOutputIOPtr;
typedef boost::shared_ptr< ::probot_msgs::SetOutputIO const> SetOutputIOConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::probot_msgs::SetOutputIO_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::probot_msgs::SetOutputIO_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::probot_msgs::SetOutputIO_<ContainerAllocator1> & lhs, const ::probot_msgs::SetOutputIO_<ContainerAllocator2> & rhs)
{
  return lhs.ioNumber == rhs.ioNumber &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::probot_msgs::SetOutputIO_<ContainerAllocator1> & lhs, const ::probot_msgs::SetOutputIO_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace probot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::probot_msgs::SetOutputIO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::probot_msgs::SetOutputIO_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_msgs::SetOutputIO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_msgs::SetOutputIO_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_msgs::SetOutputIO_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_msgs::SetOutputIO_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::probot_msgs::SetOutputIO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17d3f288ef8d0147911617f2a2126f98";
  }

  static const char* value(const ::probot_msgs::SetOutputIO_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17d3f288ef8d0147ULL;
  static const uint64_t static_value2 = 0x911617f2a2126f98ULL;
};

template<class ContainerAllocator>
struct DataType< ::probot_msgs::SetOutputIO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "probot_msgs/SetOutputIO";
  }

  static const char* value(const ::probot_msgs::SetOutputIO_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::probot_msgs::SetOutputIO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 ioNumber\n"
"int8 status\n"
"\n"
"int8 IO_LOW = 0\n"
"int8 IO_HIGH = 1\n"
;
  }

  static const char* value(const ::probot_msgs::SetOutputIO_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::probot_msgs::SetOutputIO_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ioNumber);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetOutputIO_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::probot_msgs::SetOutputIO_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::probot_msgs::SetOutputIO_<ContainerAllocator>& v)
  {
    s << indent << "ioNumber: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ioNumber);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROBOT_MSGS_MESSAGE_SETOUTPUTIO_H
